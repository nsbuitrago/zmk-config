/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        shift-escape {
            bindings = <&mt LEFT_SHIFT ESCAPE>;
            key-positions = <34 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
            // |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |  L   | [+OPT] BSPC | 
            // |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | , | . | ; |
            //             | OPT | LWR | RET |     | [+CMD] SPACE | RSE  | CTRL |

            display-name = "Base";
            bindings = <
  &kp Q  &kp W  &kp E     &kp R         &kp T           &kp Y      &kp U        &kp I      &kp O       &kp P
  &kp A  &kp S  &kp D     &kp F         &kp G           &kp H      &kp J        &kp K      &kp L       &kp BACKSPACE
  &kp Z  &kp X  &kp C     &kp V         &kp B           &kp N      &kp M        &kp COMMA  &kp PERIOD  &kp SLASH
                &kp LALT  &lt 1 ESCAPE  &mt LGUI RET    &kp SPACE  &lt 2 UNDER  &kp RCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // | !     |  @  |  #   |  $    |  %  |     |  ^  |  &  |  *  |  -_  |  =+  |
            // | BT0   | BT1 | BT2  | BT3   | BT4 |     | '"  |  (  |  )  |  [   |  ]   |
            // | BTCLR | OPT | CMD  | SHIFT |     |     | `~  | /?  |  \| |     |     |
            //               | CTRL |       | SPC |      | RET | ESC | TAB |

            display-name = "Lower";
            bindings = <
  &kp EXCL        &kp AT        &kp HASH      &kp DLLR          &kp PRCNT                         &kp CARET         &kp AMPS              &kp STAR               &kp MINUS         &kp EQUAL
  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL     &kp LEFT_COMMAND  &kp LS(LA(LC(LG(LEFT_SHIFT))))    &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
  &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3                      &kp GRAVE         &kp COLON             &kp SEMI               &kp BACKSLASH     &kp PIPE
                                &trans        &trans            &trans                            &kp ESCAPE        &kp LS(TAB)           &kp TAB
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // | 0) |  1! |  2@ |  3# |  5% |     |     |  BRI_DN |  BRI_UP |      |      |
            // |    |  4$ |  5% |  6^ |     |     |     |  VOL_DN |  VOL_UP |      |      |
            // |    |  7& |  8* |  9( |     |     |     |  CMD    | CTRL    | META |      |
            //            | GUI | ESC | SPC |     | RET |     | TAB |

            display-name = "Raise";
            bindings = <
  &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &kp LEFT                        &kp DOWN              &kp UP_ARROW       &kp RIGHT        &trans
  &kp PERIOD  &kp NUMBER_4  &kp N5        &kp N6        &trans        &kp RA(RS(RC(RG(LEFT_SHIFT))))  &kp RIGHT_COMMAND     &kp RIGHT_CONTROL  &kp RIGHT_ALT    &kp RIGHT_SHIFT
  &kp COMMA   &kp N7        &kp N8        &kp N9        &trans        &kp C_BRIGHTNESS_DEC            &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans
                            &kp LGUI      &kp SPACE     &kp RETURN    &trans                          &trans                &trans
            >;
        };
    };
};

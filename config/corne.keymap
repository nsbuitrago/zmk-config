/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <34 31>;
        };

        func {
            bindings = <&mo 5>;
            key-positions = <30 35>;
        };
    };

    macros {
        double_colon: double_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "DOUBLE_COLON";
        };
    };

    behaviors {
        lh_pht: lh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_PHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-unless-interrupted";
            retro-tap;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            require-prior-idle-ms = <300>;
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "RH_PHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-unless-interrupted";
            retro-tap;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            require-prior-idle-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
            // |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |  L   | [+OPT] BSPC | 
            // |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | , | . | ; |
            //             | OPT | LWR | RET |     | [+CMD] SPACE | RSE  | CTRL |

            display-name = "alpha";
            bindings = <
  &kp Q  &kp W            &kp E               &kp R               &kp T                             &kp Y                            &kp U                &kp I                &kp O            &kp P
  &kp A  &lh_pht LCTRL S  &lh_pht LEFT_ALT D  &lh_pht LEFT_GUI F  &lh_pht LS(LA(LC(LEFT_GUI))) G    &rh_pht RS(RA(RC(RIGHT_GUI))) H  &rh_pht RIGHT_GUI J  &rh_pht RIGHT_ALT K  &rh_pht RCTRL L  &kp BACKSPACE
  &kp Z  &kp X            &kp C               &kp V               &kp B                             &kp N                            &kp M                &kp COMMA            &kp PERIOD       &kp SLASH
                          &lt 3 MINUS         &lt 1 ESCAPE        &mt LSHIFT RETURN                 &mt RIGHT_SHIFT SPACE            &lt 2 TAB            &lt 4 UNDERSCORE
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // | !     |  @  |  #   |  $    |  %  |     |  ^  |  &  |  *  |  -_  |  =+  |
            // | BT0   | BT1 | BT2  | BT3   | BT4 |     | '"  |  (  |  )  |  [   |  ]   |
            // | BTCLR | OPT | CMD  | SHIFT |     |     | `~  | /?  |  \| |     |     |
            //               | CTRL |       | SPC |      | RET | ESC | TAB |

            display-name = "symbols";
            bindings = <
  &kp SINGLE_QUOTE  &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp PRCNT    &kp AMPERSAND  &double_colon  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT
  &kp EXCLAMATION   &kp MINUS      &kp PLUS          &kp EQUAL          &kp HASH     &kp PIPE       &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI
  &kp CARET         &kp SLASH      &kp ASTERISK      &kp BACKSLASH      &kp GRAVE    &kp TILDE      &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN
                                   &trans            &trans             &trans       &trans         &sk LEFT_GUI   &trans
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // | 0) |  1! |  2@ |  3# |  5% |     |     |  BRI_DN |  BRI_UP |      |      |
            // |    |  4$ |  5% |  6^ |     |     |     |  VOL_DN |  VOL_UP |      |      |
            // |    |  7& |  8* |  9( |     |     |     |  CMD    | CTRL    | META |      |
            //            | GUI | ESC | SPC |     | RET |     | TAB |

            display-name = "numbers";
            bindings = <
  &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &sk LC(LS(LA(LGUI)))  &sk RGUI   &sk RIGHT_ALT  &sk RCTRL  &sk RIGHT_SHIFT
  &kp PERIOD  &kp NUMBER_4  &kp N5        &kp N6        &kp COMMA     &kp LEFT              &kp DOWN   &kp UP_ARROW   &kp RIGHT  &kp BACKSPACE
  &trans      &kp N7        &kp N8        &kp N9        &trans        &kp PLUS              &kp MINUS  &kp ASTERISK   &kp SLASH  &kp EQUAL
                            &kp LGUI      &kp SPACE     &kp RETURN    &trans                &trans     &trans
            >;
        };

        system {
            bindings = <
  &bt BT_CLR  &bt BT_CLR_ALL  &trans        &trans        &trans    &kp C_BRI_MIN  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM  &trans
  &trans      &bt BT_SEL 3    &bt BT_SEL 1  &bt BT_SEL 0  &trans    &kp C_MUTE     &kp C_VOL_DN          &kp C_VOL_UP          &trans                    &trans
  &trans      &trans          &trans        &trans        &trans    &trans         &trans                &trans                &trans                    &trans
                              &trans        &trans        &trans    &trans         &trans                &trans
            >;
        };

        nav {
            bindings = <
  &kp LA(N0)  &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &trans    &trans                    &trans         &trans    &trans     &trans
  &trans      &kp LA(NUMBER_4)  &kp LA(N5)        &kp LA(NUMBER_6)  &trans    &sk LS(LA(LC(LEFT_GUI)))  &sk RIGHT_GUI  &sk RALT  &sk RCTRL  &sk LEFT_SHIFT
  &trans      &kp LA(N7)        &kp LA(N8)        &kp LA(N9)        &trans    &trans                    &trans         &trans    &trans     &trans
                                &trans            &trans            &trans    &trans                    &kp TAB        &trans
            >;
        };

        func {
            bindings = <
  &trans  &kp F1  &kp F2  &kp F3  &trans    &trans  &kp F10  &kp F11  &kp F12  &trans
  &trans  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans   &trans   &trans   &trans
  &trans  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans   &trans   &trans   &trans
                  &trans  &trans  &trans    &trans  &trans   &trans
            >;
        };
    };
};
